basePath: /api/v1
definitions:
  backupmodels.Entry:
    properties:
      file_id:
        type: string
      guild_id:
        type: string
      timestamp:
        type: string
    type: object
  discordgo.ApplicationCommandOption:
    properties:
      autocomplete:
        description: 'NOTE: mutually exclusive with Choices.'
        type: boolean
      channel_types:
        description: |-
          NOTE: This feature was on the API, but at some point developers decided to remove it.
          So I commented it, until it will be officially on the docs.
          Default     bool                              `json:"default"`
        items:
          description: The type of the channel.
          type: integer
        type: array
      choices:
        items:
          $ref: '#/definitions/discordgo.ApplicationCommandOptionChoice'
        type: array
      description:
        type: string
      name:
        type: string
      options:
        items:
          $ref: '#/definitions/discordgo.ApplicationCommandOption'
        type: array
      required:
        type: boolean
      type:
        type: integer
    type: object
  discordgo.ApplicationCommandOptionChoice:
    properties:
      name:
        type: string
      value:
        type: object
    type: object
  discordgo.Channel:
    properties:
      application_id:
        description: ApplicationID of the DM creator Zeroed if guild channel or not
          a bot user
        type: string
      bitrate:
        description: The bitrate of the channel, if it is a voice channel.
        type: integer
      guild_id:
        description: |-
          The ID of the guild to which the channel belongs, if it is in a guild.
          Else, this ID is empty (e.g. DM channels).
        type: string
      icon:
        description: Icon of the group DM channel.
        type: string
      id:
        description: The ID of the channel.
        type: string
      last_message_id:
        description: |-
          The ID of the last message sent in the channel. This is not
          guaranteed to be an ID of a valid message.
        type: string
      last_pin_timestamp:
        description: |-
          The timestamp of the last pinned message in the channel.
          nil if the channel has no pinned messages.
        type: string
      name:
        description: The name of the channel.
        type: string
      nsfw:
        description: Whether the channel is marked as NSFW.
        type: boolean
      owner_id:
        description: ID of the DM creator Zeroed if guild channel
        type: string
      parent_id:
        description: The ID of the parent channel, if the channel is under a category
        type: string
      permission_overwrites:
        description: A list of permission overwrites present for the channel.
        items:
          $ref: '#/definitions/discordgo.PermissionOverwrite'
        type: array
      position:
        description: The position of the channel, used for sorting in client.
        type: integer
      rate_limit_per_user:
        description: |-
          Amount of seconds a user has to wait before sending another message (0-21600)
          bots, as well as users with the permission manage_messages or manage_channel, are unaffected
        type: integer
      recipients:
        description: The recipients of the channel. This is only populated in DM channels.
        items:
          $ref: '#/definitions/discordgo.User'
        type: array
      topic:
        description: The topic of the channel.
        type: string
      type:
        description: The type of the channel.
        type: integer
      user_limit:
        description: The user limit of the voice channel.
        type: integer
    type: object
  discordgo.Emoji:
    properties:
      animated:
        type: boolean
      available:
        type: boolean
      id:
        type: string
      managed:
        type: boolean
      name:
        type: string
      require_colons:
        type: boolean
      roles:
        items:
          type: string
        type: array
      user:
        $ref: '#/definitions/discordgo.User'
    type: object
  discordgo.Member:
    properties:
      communication_disabled_until:
        description: |-
          The time at which the member's timeout will expire.
          Time in the past or nil if the user is not timed out.
        type: string
      deaf:
        description: Whether the member is deafened at a guild level.
        type: boolean
      guild_id:
        description: The guild ID on which the member exists.
        type: string
      joined_at:
        description: The time at which the member joined the guild.
        type: string
      mute:
        description: Whether the member is muted at a guild level.
        type: boolean
      nick:
        description: The nickname of the member, if they have one.
        type: string
      pending:
        description: Is true while the member hasn't accepted the membership screen.
        type: boolean
      permissions:
        description: Total permissions of the member in the channel, including overrides,
          returned when in the interaction object.
        example: "0"
        type: string
      premium_since:
        description: When the user used their Nitro boost on the server
        type: string
      roles:
        description: A list of IDs of the roles which are possessed by the member.
        items:
          type: string
        type: array
      user:
        $ref: '#/definitions/discordgo.User'
        description: The underlying user on which the member is based.
    type: object
  discordgo.Message:
    properties:
      activity:
        $ref: '#/definitions/discordgo.MessageActivity'
        description: Is sent with Rich Presence-related chat embeds
      application:
        $ref: '#/definitions/discordgo.MessageApplication'
        description: Is sent with Rich Presence-related chat embeds
      attachments:
        description: A list of attachments present in the message.
        items:
          $ref: '#/definitions/discordgo.MessageAttachment'
        type: array
      author:
        $ref: '#/definitions/discordgo.User'
        description: |-
          The author of the message. This is not guaranteed to be a
          valid user (webhook-sent messages do not possess a full author).
      channel_id:
        description: The ID of the channel in which the message was sent.
        type: string
      content:
        description: The content of the message.
        type: string
      edited_timestamp:
        description: |-
          The time at which the last edit of the message
          occurred, if it has been edited.
        type: string
      embeds:
        description: A list of embeds present in the message.
        items:
          $ref: '#/definitions/discordgo.MessageEmbed'
        type: array
      flags:
        description: |-
          The flags of the message, which describe extra features of a message.
          This is a combination of bit masks; the presence of a certain permission can
          be checked by performing a bitwise AND between this int and the flag.
        type: integer
      guild_id:
        description: The ID of the guild in which the message was sent.
        type: string
      id:
        description: The ID of the message.
        type: string
      member:
        $ref: '#/definitions/discordgo.Member'
        description: |-
          Member properties for this message's author,
          contains only partial information
      mention_channels:
        description: |-
          Channels specifically mentioned in this message
          Not all channel mentions in a message will appear in mention_channels.
          Only textual channels that are visible to everyone in a lurkable guild will ever be included.
          Only crossposted messages (via Channel Following) currently include mention_channels at all.
          If no mentions in the message meet these requirements, this field will not be sent.
        items:
          $ref: '#/definitions/discordgo.Channel'
        type: array
      mention_everyone:
        description: Whether the message mentions everyone.
        type: boolean
      mention_roles:
        description: The roles mentioned in the message.
        items:
          type: string
        type: array
      mentions:
        description: A list of users mentioned in the message.
        items:
          $ref: '#/definitions/discordgo.User'
        type: array
      message_reference:
        $ref: '#/definitions/discordgo.MessageReference'
        description: |-
          MessageReference contains reference data sent with crossposted or reply messages.
          This does not contain the reference *to* this message; this is for when *this* message references another.
          To generate a reference to this message, use (*Message).Reference().
      pinned:
        description: Whether the message is pinned or not.
        type: boolean
      reactions:
        description: A list of reactions to the message.
        items:
          $ref: '#/definitions/discordgo.MessageReactions'
        type: array
      timestamp:
        description: |-
          The time at which the messsage was sent.
          CAUTION: this field may be removed in a
          future API version; it is safer to calculate
          the creation time via the ID.
        type: string
      tts:
        description: Whether the message is text-to-speech.
        type: boolean
      type:
        description: The type of the message.
        type: integer
      webhook_id:
        description: The webhook ID of the message, if it was generated by a webhook
        type: string
    type: object
  discordgo.MessageActivity:
    properties:
      party_id:
        type: string
      type:
        type: integer
    type: object
  discordgo.MessageApplication:
    properties:
      cover_image:
        type: string
      description:
        type: string
      icon:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  discordgo.MessageAttachment:
    properties:
      ephemeral:
        type: boolean
      filename:
        type: string
      height:
        type: integer
      id:
        type: string
      proxy_url:
        type: string
      size:
        type: integer
      url:
        type: string
      width:
        type: integer
    type: object
  discordgo.MessageEmbed:
    properties:
      author:
        $ref: '#/definitions/discordgo.MessageEmbedAuthor'
      color:
        type: integer
      description:
        type: string
      fields:
        items:
          $ref: '#/definitions/discordgo.MessageEmbedField'
        type: array
      footer:
        $ref: '#/definitions/discordgo.MessageEmbedFooter'
      image:
        $ref: '#/definitions/discordgo.MessageEmbedImage'
      provider:
        $ref: '#/definitions/discordgo.MessageEmbedProvider'
      thumbnail:
        $ref: '#/definitions/discordgo.MessageEmbedThumbnail'
      timestamp:
        type: string
      title:
        type: string
      type:
        type: string
      url:
        type: string
      video:
        $ref: '#/definitions/discordgo.MessageEmbedVideo'
    type: object
  discordgo.MessageEmbedAuthor:
    properties:
      icon_url:
        type: string
      name:
        type: string
      proxy_icon_url:
        type: string
      url:
        type: string
    type: object
  discordgo.MessageEmbedField:
    properties:
      inline:
        type: boolean
      name:
        type: string
      value:
        type: string
    type: object
  discordgo.MessageEmbedFooter:
    properties:
      icon_url:
        type: string
      proxy_icon_url:
        type: string
      text:
        type: string
    type: object
  discordgo.MessageEmbedImage:
    properties:
      height:
        type: integer
      proxy_url:
        type: string
      url:
        type: string
      width:
        type: integer
    type: object
  discordgo.MessageEmbedProvider:
    properties:
      name:
        type: string
      url:
        type: string
    type: object
  discordgo.MessageEmbedThumbnail:
    properties:
      height:
        type: integer
      proxy_url:
        type: string
      url:
        type: string
      width:
        type: integer
    type: object
  discordgo.MessageEmbedVideo:
    properties:
      height:
        type: integer
      url:
        type: string
      width:
        type: integer
    type: object
  discordgo.MessageReactions:
    properties:
      count:
        type: integer
      emoji:
        $ref: '#/definitions/discordgo.Emoji'
      me:
        type: boolean
    type: object
  discordgo.MessageReference:
    properties:
      channel_id:
        type: string
      guild_id:
        type: string
      message_id:
        type: string
    type: object
  discordgo.PermissionOverwrite:
    properties:
      allow:
        example: "0"
        type: string
      deny:
        example: "0"
        type: string
      id:
        type: string
      type:
        type: integer
    type: object
  discordgo.Role:
    properties:
      color:
        description: The hex color of this role.
        type: integer
      hoist:
        description: Whether this role is hoisted (shows up separately in member list).
        type: boolean
      id:
        description: The ID of the role.
        type: string
      managed:
        description: |-
          Whether this role is managed by an integration, and
          thus cannot be manually added to, or taken from, members.
        type: boolean
      mentionable:
        description: Whether this role is mentionable.
        type: boolean
      name:
        description: The name of the role.
        type: string
      permissions:
        description: |-
          The permissions of the role on the guild (doesn't include channel overrides).
          This is a combination of bit masks; the presence of a certain permission can
          be checked by performing a bitwise AND between this int and the permission.
        example: "0"
        type: string
      position:
        description: The position of this role in the guild's role hierarchy.
        type: integer
    type: object
  discordgo.User:
    properties:
      avatar:
        description: |-
          The hash of the user's avatar. Use Session.UserAvatar
          to retrieve the avatar itself.
        type: string
      bot:
        description: Whether the user is a bot.
        type: boolean
      discriminator:
        description: The discriminator of the user (4 numbers after name).
        type: string
      email:
        description: |-
          The email of the user. This is only present when
          the application possesses the email scope for the user.
        type: string
      flags:
        description: |-
          The flags on a user's account.
          Only available when the request is authorized via a Bearer token.
        type: integer
      id:
        description: The ID of the user.
        type: string
      locale:
        description: The user's chosen language option.
        type: string
      mfa_enabled:
        description: Whether the user has multi-factor authentication enabled.
        type: boolean
      premium_type:
        description: |-
          The type of Nitro subscription on a user's account.
          Only available when the request is authorized via a Bearer token.
        type: integer
      public_flags:
        description: |-
          The public flags on a user's account.
          This is a combination of bit masks; the presence of a certain flag can
          be checked by performing a bitwise AND between this int and the flag.
        type: integer
      system:
        description: Whether the user is an Official Discord System user (part of
          the urgent message system).
        type: boolean
      token:
        description: |-
          The token of the user. This is only present for
          the user represented by the current session.
        type: string
      username:
        description: The user's username.
        type: string
      verified:
        description: Whether the user's email is verified.
        type: boolean
    type: object
  models.APITokenResponse:
    properties:
      created:
        type: string
      expires:
        type: string
      hits:
        type: integer
      last_access:
        type: string
      token:
        type: string
    type: object
  models.AccessTokenResponse:
    properties:
      expires:
        type: string
      token:
        type: string
    type: object
  models.AntiraidAction:
    properties:
      ids:
        items:
          type: string
        type: array
      type:
        type: integer
    type: object
  models.AntiraidSettings:
    properties:
      burst:
        type: integer
      regeneration_period:
        type: integer
      state:
        type: boolean
      verification:
        type: boolean
    type: object
  models.CaptchaSiteKey:
    properties:
      sitekey:
        type: string
    type: object
  models.CommandInfo:
    properties:
      description:
        type: string
      domain_name:
        type: string
      group:
        type: string
      help:
        type: string
      invokes:
        items:
          type: string
        type: array
      is_executable_in_dm:
        type: boolean
      sub_permission_rules:
        items:
          $ref: '#/definitions/shireikan.SubPermission'
        type: array
    type: object
  models.Contact:
    properties:
      title:
        type: string
      url:
        type: string
      value:
        type: string
    type: object
  models.Count:
    properties:
      count:
        type: integer
    type: object
  models.EnableStatus:
    properties:
      enabled:
        type: boolean
    type: object
  models.Error:
    properties:
      code:
        type: integer
      context:
        type: string
      error:
        type: string
    type: object
  models.FlatUser:
    properties:
      avatar_url:
        type: string
      bot:
        type: boolean
      discriminator:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  models.FlushGuildRequest:
    properties:
      leave_after:
        type: boolean
      validation:
        type: string
    type: object
  models.Guild:
    properties:
      afk_channel_id:
        type: string
      backups_enabled:
        type: boolean
      banner:
        type: string
      channels:
        items:
          $ref: '#/definitions/discordgo.Channel'
        type: array
      description:
        type: string
      icon:
        type: string
      icon_url:
        type: string
      id:
        type: string
      invite_block_enabled:
        type: boolean
      joined_at:
        type: string
      large:
        type: boolean
      latest_backup_entry:
        type: string
      member_count:
        type: integer
      mfa_level:
        type: integer
      name:
        type: string
      owner_id:
        type: string
      premium_subscription_count:
        type: integer
      premium_tier:
        type: integer
      region:
        type: string
      roles:
        items:
          $ref: '#/definitions/discordgo.Role'
        type: array
      self_member:
        $ref: '#/definitions/models.Member'
      splash:
        type: string
      unavailable:
        type: boolean
      verification_level:
        type: integer
    type: object
  models.GuildAPISettings:
    properties:
      allowed_origins:
        type: string
      enabled:
        type: boolean
      protected:
        type: boolean
      token_hash:
        type: string
    type: object
  models.GuildAPISettingsRequest:
    properties:
      allowed_origins:
        type: string
      enabled:
        type: boolean
      protected:
        type: boolean
      reset_token:
        type: boolean
      token:
        type: string
      token_hash:
        type: string
    type: object
  models.GuildKarmaEntry:
    properties:
      member:
        $ref: '#/definitions/models.Member'
      value:
        type: integer
    type: object
  models.GuildLogEntry:
    properties:
      guildid:
        type: string
      id:
        type: integer
      message:
        type: string
      module:
        type: string
      severity:
        type: integer
      timestamp:
        type: string
    type: object
  models.GuildReduced:
    properties:
      icon:
        type: string
      icon_url:
        type: string
      id:
        type: string
      joined_at:
        type: string
      member_count:
        type: integer
      name:
        type: string
      online_member_count:
        type: integer
      owner_id:
        type: string
      region:
        type: string
    type: object
  models.GuildSettings:
    properties:
      autoroles:
        items:
          type: string
        type: array
      joinmessagechannel:
        type: string
      joinmessagetext:
        type: string
      leavemessagechannel:
        type: string
      leavemessagetext:
        type: string
      modlogchannel:
        type: string
      perms:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      prefix:
        type: string
      voicelogchannel:
        type: string
    type: object
  models.InviteSettingsRequest:
    properties:
      guild_id:
        type: string
      invite_code:
        type: string
      message:
        type: string
    type: object
  models.InviteSettingsResponse:
    properties:
      guild:
        $ref: '#/definitions/models.Guild'
      invite_url:
        type: string
      message:
        type: string
    type: object
  models.JoinLogEntry:
    properties:
      account_created:
        type: string
      guild_id:
        type: string
      tag:
        type: string
      timestamp:
        type: string
      user_id:
        type: string
    type: object
  models.KarmaRule:
    properties:
      action:
        type: string
      argument:
        type: string
      guildid:
        type: string
      id:
        type: integer
      trigger:
        type: integer
      value:
        type: integer
    type: object
  models.KarmaSettings:
    properties:
      emotes_decrease:
        items:
          type: string
        type: array
      emotes_increase:
        items:
          type: string
        type: array
      penalty:
        type: boolean
      state:
        type: boolean
      tokens:
        type: integer
    type: object
  models.LandingPageResponse:
    properties:
      localinvite:
        type: string
      publiccaranyinvite:
        type: string
      publicmaininvite:
        type: string
    type: object
  models.Member:
    properties:
      avatar_url:
        type: string
      chat_muted:
        type: boolean
      communication_disabled_until:
        description: |-
          The time at which the member's timeout will expire.
          Time in the past or nil if the user is not timed out.
        type: string
      created_at:
        type: string
      deaf:
        description: Whether the member is deafened at a guild level.
        type: boolean
      dominance:
        type: integer
      guild_id:
        description: The guild ID on which the member exists.
        type: string
      guild_name:
        type: string
      joined_at:
        description: The time at which the member joined the guild.
        type: string
      karma:
        type: integer
      karma_total:
        type: integer
      mute:
        description: Whether the member is muted at a guild level.
        type: boolean
      nick:
        description: The nickname of the member, if they have one.
        type: string
      pending:
        description: Is true while the member hasn't accepted the membership screen.
        type: boolean
      permissions:
        description: Total permissions of the member in the channel, including overrides,
          returned when in the interaction object.
        example: "0"
        type: string
      premium_since:
        description: When the user used their Nitro boost on the server
        type: string
      roles:
        description: A list of IDs of the roles which are possessed by the member.
        items:
          type: string
        type: array
      user:
        $ref: '#/definitions/discordgo.User'
        description: The underlying user on which the member is based.
    type: object
  models.PermissionsMap:
    additionalProperties:
      items:
        type: string
      type: array
    type: object
  models.PermissionsResponse:
    properties:
      permissions:
        items:
          type: string
        type: array
    type: object
  models.PermissionsUpdate:
    properties:
      perm:
        type: string
      role_ids:
        items:
          type: string
        type: array
    type: object
  models.Privacy:
    properties:
      contact:
        items:
          $ref: '#/definitions/models.Contact'
        type: array
      noticeurl:
        type: string
    type: object
  models.ReasonRequest:
    properties:
      attachment:
        type: string
      reason:
        type: string
      timeout:
        type: string
    type: object
  models.Report:
    properties:
      attachment_url:
        type: string
      created:
        type: string
      executor:
        $ref: '#/definitions/models.FlatUser'
      executor_id:
        type: string
      guild_id:
        type: string
      id:
        type: integer
      message:
        type: string
      timeout:
        type: string
      type:
        type: integer
      type_name:
        type: string
      victim:
        $ref: '#/definitions/models.FlatUser'
      victim_id:
        type: string
    type: object
  models.ReportRequest:
    properties:
      attachment:
        type: string
      reason:
        type: string
      timeout:
        type: string
      type:
        type: integer
    type: object
  models.SearchResult:
    properties:
      guilds:
        items:
          $ref: '#/definitions/models.GuildReduced'
        type: array
      members:
        items:
          $ref: '#/definitions/models.Member'
        type: array
    type: object
  models.SlashCommandInfo:
    properties:
      description:
        type: string
      dm_capable:
        type: boolean
      domain:
        type: string
      group:
        type: string
      name:
        type: string
      options:
        items:
          $ref: '#/definitions/discordgo.ApplicationCommandOption'
        type: array
      subdomains:
        items:
          $ref: '#/definitions/permissions.SubPermission'
        type: array
      version:
        type: string
    type: object
  models.StarboardEntryResponse:
    properties:
      author_avatar_url:
        type: string
      author_id:
        type: string
      author_username:
        type: string
      channel_id:
        type: string
      content:
        type: string
      guild_id:
        type: string
      media_urls:
        items:
          type: string
        type: array
      message_id:
        type: string
      message_url:
        type: string
      score:
        type: integer
      starboard_id:
        type: string
    type: object
  models.State:
    properties:
      state:
        type: boolean
    type: object
  models.Status:
    properties:
      code:
        type: integer
    type: object
  models.SystemInfo:
    properties:
      arch:
        type: string
      bot_invite:
        type: string
      bot_user_id:
        type: string
      build_date:
        type: string
      commit_hash:
        type: string
      cpus:
        type: integer
      go_routines:
        type: integer
      go_version:
        type: string
      guilds:
        type: integer
      heap_use:
        type: integer
      heap_use_str:
        type: string
      os:
        type: string
      stack_use:
        type: integer
      stack_use_str:
        type: string
      uptime:
        type: integer
      uptime_str:
        type: string
      version:
        type: string
    type: object
  models.UnbanRequest:
    properties:
      created:
        type: string
      guild_id:
        type: string
      id:
        type: integer
      message:
        type: string
      processed:
        type: string
      processed_by:
        type: string
      processed_message:
        type: string
      status:
        type: integer
      user_id:
        type: string
      user_tag:
        type: string
    type: object
  models.User:
    properties:
      avatar:
        description: |-
          The hash of the user's avatar. Use Session.UserAvatar
          to retrieve the avatar itself.
        type: string
      avatar_url:
        type: string
      bot:
        description: Whether the user is a bot.
        type: boolean
      bot_owner:
        type: boolean
      captcha_verified:
        type: boolean
      created_at:
        type: string
      discriminator:
        description: The discriminator of the user (4 numbers after name).
        type: string
      email:
        description: |-
          The email of the user. This is only present when
          the application possesses the email scope for the user.
        type: string
      flags:
        description: |-
          The flags on a user's account.
          Only available when the request is authorized via a Bearer token.
        type: integer
      id:
        description: The ID of the user.
        type: string
      locale:
        description: The user's chosen language option.
        type: string
      mfa_enabled:
        description: Whether the user has multi-factor authentication enabled.
        type: boolean
      premium_type:
        description: |-
          The type of Nitro subscription on a user's account.
          Only available when the request is authorized via a Bearer token.
        type: integer
      public_flags:
        description: |-
          The public flags on a user's account.
          This is a combination of bit masks; the presence of a certain flag can
          be checked by performing a bitwise AND between this int and the flag.
        type: integer
      system:
        description: Whether the user is an Official Discord System user (part of
          the urgent message system).
        type: boolean
      token:
        description: |-
          The token of the user. This is only present for
          the user represented by the current session.
        type: string
      username:
        description: The user's username.
        type: string
      verified:
        description: Whether the user's email is verified.
        type: boolean
    type: object
  models.UsersettingsOTA:
    properties:
      enabled:
        type: boolean
    type: object
  models.UsersettingsPrivacy:
    properties:
      starboard_optout:
        type: boolean
    type: object
  permissions.SubPermission:
    properties:
      description:
        type: string
      explicit:
        type: boolean
      term:
        type: string
    type: object
  presence.Presence:
    properties:
      game:
        type: string
      status:
        type: string
    type: object
  shireikan.SubPermission:
    properties:
      description:
        type: string
      explicit:
        type: boolean
      term:
        type: string
    type: object
info:
  contact: {}
  description: The shinpuru main REST API.
  title: shinpuru main API
  version: "1.0"
paths:
  /auth/accesstoken:
    post:
      consumes:
      - application/json
      description: Exchanges the cookie-passed refresh token with a generated access
        token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AccessTokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: Access Token Exchange
      tags:
      - Authorization
  /auth/check:
    get:
      consumes:
      - application/json
      description: Returns OK if the request is authorized.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: Authorization Check
      tags:
      - Authorization
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Reovkes the currently used access token and clears the refresh
        token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
      summary: Logout
      tags:
      - Authorization
  /channels/{guildid}:
    get:
      consumes:
      - application/json
      description: Returns a list of channels the user has access to.
      parameters:
      - description: The ID of the guild.
        in: path
        name: guildid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/discordgo.Message'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Allowed Channels
      tags:
      - Channels
  /channels/{guildid}/{id}:
    post:
      consumes:
      - application/json
      description: Send an Embed Message into a specified Channel.
      parameters:
      - description: The ID of the guild.
        in: path
        name: guildid
        required: true
        type: string
      - description: The ID of the channel.
        in: path
        name: id
        required: true
        type: string
      - description: The message embed object.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/discordgo.MessageEmbed'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/discordgo.Message'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Send Embed Message
      tags:
      - Channels
  /channels/{guildid}/{id}/{msgid}:
    post:
      consumes:
      - application/json
      description: Update an Embed Message in a specified Channel with the given message
        ID.
      parameters:
      - description: The ID of the guild.
        in: path
        name: guildid
        required: true
        type: string
      - description: The ID of the channel.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the message.
        in: path
        name: msgid
        required: true
        type: string
      - description: The message embed object.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/discordgo.MessageEmbed'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/discordgo.Message'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Update Embed Message
      tags:
      - Channels
  /guilds:
    get:
      consumes:
      - application/json
      description: Returns a list of guilds the authenticated user has in common with
        shinpuru.
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.GuildReduced'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: List Guilds
      tags:
      - Guilds
  /guilds/{id}:
    get:
      consumes:
      - application/json
      description: Returns a single guild object by it's ID.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Guild'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild
      tags:
      - Guilds
  /guilds/{id}/{memberid}:
    get:
      consumes:
      - application/json
      description: Returns a single guild member by ID.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the member.
        in: path
        name: memberid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Member'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Member
      tags:
      - Members
  /guilds/{id}/{memberid}/ban:
    post:
      consumes:
      - application/json
      description: Creates a member ban report.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the victim member.
        in: path
        name: memberid
        required: true
        type: string
      - description: The report payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.ReasonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Report'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Create A Member Ban Report
      tags:
      - Member Reporting
  /guilds/{id}/{memberid}/kick:
    post:
      consumes:
      - application/json
      description: Creates a member kick report.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the victim member.
        in: path
        name: memberid
        required: true
        type: string
      - description: The report payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.ReasonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Report'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Create A Member Kick Report
      tags:
      - Member Reporting
  /guilds/{id}/{memberid}/mute:
    post:
      consumes:
      - application/json
      description: Unmute a muted member.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the victim member.
        in: path
        name: memberid
        required: true
        type: string
      - description: The unmute payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.ReasonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Unmute A Member
      tags:
      - Member Reporting
  /guilds/{id}/{memberid}/permissions:
    get:
      consumes:
      - application/json
      description: Returns the permission array of the given user.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the member.
        in: path
        name: memberid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PermissionsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Member Permissions
      tags:
      - Members
  /guilds/{id}/{memberid}/permissions/allowed:
    get:
      consumes:
      - application/json
      description: Returns all detailed permission DNS which the member is alloed
        to perform.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the member.
        in: path
        name: memberid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              type: string
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Member Allowed Permissions
      tags:
      - Members
  /guilds/{id}/{memberid}/reports:
    get:
      consumes:
      - application/json
      description: Returns a list of reports of the given member.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the member.
        in: path
        name: memberid
        required: true
        type: string
      - default: 100
        description: The amount of results returned.
        in: query
        minimum: 1
        name: limit
        type: integer
      - default: 0
        description: The amount of results to be skipped.
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.Report'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Member Reports
      tags:
      - Members
    post:
      consumes:
      - application/json
      description: Creates a member report.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the victim member.
        in: path
        name: memberid
        required: true
        type: string
      - description: The report payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.ReportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Report'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Create A Member Report
      tags:
      - Member Reporting
  /guilds/{id}/{memberid}/reports/count:
    get:
      consumes:
      - application/json
      description: Returns the total count of reports of the given user.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the member.
        in: path
        name: memberid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Count'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Member Reports Count
      tags:
      - Members
  /guilds/{id}/{memberid}/unbanrequests:
    get:
      consumes:
      - application/json
      description: Returns the list of unban requests of the given member
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the member.
        in: path
        name: memberid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.UnbanRequest'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Member Unban Requests
      tags:
      - Members
  /guilds/{id}/{memberid}/unbanrequests/count:
    get:
      consumes:
      - application/json
      description: Returns the total or filtered count of unban requests of the given
        member.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the member.
        in: path
        name: memberid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Count'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Member Unban Requests Count
      tags:
      - Members
  /guilds/{id}/antiraid/joinlog:
    delete:
      consumes:
      - application/json
      description: Deletes all entries of the antiraid joinlog.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Reset Antiraid Joinlog
      tags:
      - Guilds
    get:
      consumes:
      - application/json
      description: Returns a list of joined members during an antiraid trigger.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.JoinLogEntry'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Antiraid Joinlog
      tags:
      - Guilds
  /guilds/{id}/backups:
    get:
      consumes:
      - application/json
      description: Returns a list of guild backups.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/backupmodels.Entry'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Backups
      tags:
      - Guild Backups
  /guilds/{id}/backups/{backupid}/download:
    get:
      consumes:
      - application/json
      description: Download a single gziped backup file.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the backup.
        in: path
        name: backupid
        required: true
        type: string
      - description: The previously obtained OTA token to authorize the download.
        in: query
        name: ota_token
        required: true
        type: string
      produces:
      - application/gzip
      responses:
        "200":
          description: OK
          schema:
            type: file
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Download Backup File
      tags:
      - Guild Backups
    post:
      consumes:
      - application/json
      description: Returns an OTA key which is used to download a backup entry.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the backup.
        in: path
        name: backupid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AccessTokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Obtain Backup Download OTA Key
      tags:
      - Guild Backups
  /guilds/{id}/backups/toggle:
    post:
      consumes:
      - application/json
      description: Toggle guild backup enable state.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: Enable state payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.EnableStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Toggle Guild Backup Enable
      tags:
      - Guild Backups
  /guilds/{id}/inviteblock:
    post:
      consumes:
      - application/json
      description: Toggle enabled state of the guild invite block system.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The enable status payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.EnableStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Toggle Guild Inviteblock Enable
      tags:
      - Guilds
  /guilds/{id}/members:
    get:
      consumes:
      - application/json
      description: Returns a list of guild members.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: Request members after the given member ID.
        in: query
        name: after
        type: string
      - default: 100
        description: The amount of results returned.
        in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Wraped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.Member'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Member List
      tags:
      - Members
  /guilds/{id}/permissions:
    get:
      consumes:
      - application/json
      description: Returns the specified guild permission settings.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PermissionsMap'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Permission Settings
      tags:
      - Guilds
    post:
      consumes:
      - application/json
      description: Apply a new guild permission rule for a specified role.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The permission rule payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.PermissionsUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Apply Guild Permission Rule
      tags:
      - Guilds
  /guilds/{id}/reports:
    get:
      consumes:
      - application/json
      description: Returns a list of guild modlog entries for the given guild.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - default: 0
        description: The offset of returned entries
        in: query
        name: offset
        type: integer
      - default: 0
        description: The amount of returned entries (0 = all)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.Report'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Modlog
      tags:
      - Guilds
  /guilds/{id}/reports/count:
    get:
      consumes:
      - application/json
      description: Returns the total count of entries in the guild mod log.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Count'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Modlog Count
      tags:
      - Guilds
  /guilds/{id}/scoreboard:
    get:
      consumes:
      - application/json
      description: Returns a list of scoreboard entries for the given guild.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - default: 25
        description: Limit the amount of result values
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.GuildKarmaEntry'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Scoreboard
      tags:
      - Guilds
  /guilds/{id}/settings:
    get:
      consumes:
      - application/json
      description: Returns the specified general guild settings.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GuildSettings'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Settings
      tags:
      - Guilds
    post:
      consumes:
      - application/json
      description: Returns the specified general guild settings.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: Modified guild settings payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.GuildSettings'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Settings
      tags:
      - Guilds
  /guilds/{id}/settings/antiraid:
    get:
      consumes:
      - application/json
      description: Returns the specified guild antiraid settings.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AntiraidSettings'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Antiraid Settings
      tags:
      - Guilds
    post:
      consumes:
      - application/json
      description: Update the guild antiraid settings specification.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The guild antiraid settings payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.AntiraidSettings'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Update Guild Antiraid Settings
      tags:
      - Guilds
  /guilds/{id}/settings/antiraid/action:
    post:
      consumes:
      - application/json
      description: Execute a specific action on antiraid listed users
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The antiraid action payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.AntiraidAction'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Guild Antiraid Bulk Action
      tags:
      - Guilds
  /guilds/{id}/settings/api:
    get:
      consumes:
      - application/json
      description: Returns the settings state of the Guild API.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GuildAPISettings'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Settings API State
      tags:
      - Guilds
    post:
      consumes:
      - application/json
      description: Set the settings state of the Guild API.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The guild API settings payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.GuildAPISettingsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GuildAPISettings'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Set Guild Settings API State
      tags:
      - Guilds
  /guilds/{id}/settings/codeexec:
    get:
      consumes:
      - application/json
      description: Returns the settings state of the Guild Code Exec.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EnableStatus'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Settings Code Exec State
      tags:
      - Guilds
    post:
      consumes:
      - application/json
      description: Set the settings state of the Guild Code Exec.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The guild API settings payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.EnableStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EnableStatus'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Set Guild Settings Code Exec State
      tags:
      - Guilds
  /guilds/{id}/settings/flushguilddata:
    post:
      consumes:
      - application/json
      description: Flushes all guild data from the database.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The guild flush payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.FlushGuildRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.State'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Flush Guild Data
      tags:
      - Guilds
  /guilds/{id}/settings/karma:
    get:
      consumes:
      - application/json
      description: Returns the specified guild karma settings.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.KarmaSettings'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Karma Settings
      tags:
      - Guilds
    post:
      consumes:
      - application/json
      description: Update the guild karma settings specification.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The guild karma settings payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.KarmaSettings'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Update Guild Karma Settings
      tags:
      - Guilds
  /guilds/{id}/settings/karma/blocklist:
    get:
      consumes:
      - application/json
      description: Returns the specified guild karma blocklist entries.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.Member'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Karma Blocklist
      tags:
      - Guilds
  /guilds/{id}/settings/karma/blocklist/{memberid}:
    delete:
      consumes:
      - application/json
      description: Remove a guild karma blocklist entry.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the guild.
        in: path
        name: memberid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Remove Guild Karma Blocklist Entry
      tags:
      - Guilds
    put:
      consumes:
      - application/json
      description: Add a guild karma blocklist entry.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the guild.
        in: path
        name: memberid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Add Guild Karma Blocklist Entry
      tags:
      - Guilds
  /guilds/{id}/settings/karma/rules:
    get:
      consumes:
      - application/json
      description: Returns a list of specified guild karma rules.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.KarmaRule'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Settings Karma Rules
      tags:
      - Guilds
    post:
      consumes:
      - application/json
      description: Create a guild karma rule.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The karma rule payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.KarmaRule'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.KarmaRule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Create Guild Settings Karma
      tags:
      - Guilds
  /guilds/{id}/settings/karma/rules/{ruleid}:
    delete:
      consumes:
      - application/json
      description: Remove a guild karma rule by ID.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the rule.
        in: path
        name: ruleid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.State'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Remove Guild Settings Karma
      tags:
      - Guilds
    post:
      consumes:
      - application/json
      description: Update a karma rule by ID.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the rule.
        in: path
        name: ruleid
        required: true
        type: string
      - description: The karma rule update payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.KarmaRule'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.KarmaRule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Update Guild Settings Karma
      tags:
      - Guilds
  /guilds/{id}/settings/logs:
    delete:
      consumes:
      - application/json
      description: Delete all guild log entries.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.State'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Delete Guild Log Entries
      tags:
      - Guilds
    get:
      consumes:
      - application/json
      description: Returns the total or filtered count of guild log entries.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Count'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Log Count
      tags:
      - Guilds
  /guilds/{id}/settings/logs/{entryid}:
    delete:
      consumes:
      - application/json
      description: Delete a single log entry.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the entry to be deleted.
        in: path
        name: entryid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.State'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Delete Guild Log Entries
      tags:
      - Guilds
  /guilds/{id}/settings/logs/state:
    get:
      consumes:
      - application/json
      description: Returns the enabled state of the guild log setting.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.State'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Settings Log State
      tags:
      - Guilds
    post:
      consumes:
      - application/json
      description: Update the enabled state of the log state guild setting.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The state payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.State'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.State'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Update Guild Settings Log State
      tags:
      - Guilds
  /guilds/{id}/settings/verification:
    get:
      consumes:
      - application/json
      description: Returns the settings state of the Guild Verification.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EnableStatus'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Settings Verification State
      tags:
      - Guilds
    post:
      consumes:
      - application/json
      description: Set the settings state of the Guild Verification.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The guild API settings payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.EnableStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EnableStatus'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Set Guild Settings Verification State
      tags:
      - Guilds
  /guilds/{id}/starboard:
    get:
      consumes:
      - application/json
      description: Returns a list of starboard entries for the given guild.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.StarboardEntryResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Starboard
      tags:
      - Guilds
  /guilds/{id}/unbanrequests:
    get:
      consumes:
      - application/json
      description: Returns the list of the guild unban requests.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListReponse
          schema:
            items:
              $ref: '#/definitions/models.UnbanRequest'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Unbanrequests
      tags:
      - Guilds
  /guilds/{id}/unbanrequests/{requestid}:
    get:
      consumes:
      - application/json
      description: Returns a single guild unban request by ID.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the unbanrequest.
        in: path
        name: requestid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UnbanRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Single Guild Unbanrequest
      tags:
      - Guilds
    post:
      consumes:
      - application/json
      description: Process a guild unban request.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      - description: The ID of the unbanrequest.
        in: path
        name: requestid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UnbanRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Process Guild Unbanrequest
      tags:
      - Guilds
  /guilds/{id}/unbanrequests/count:
    get:
      consumes:
      - application/json
      description: Returns the total or filtered count of guild unban requests.
      parameters:
      - description: The ID of the guild.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Count'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Guild Unbanrequests Count
      tags:
      - Guilds
  /me:
    get:
      consumes:
      - application/json
      description: Returns the user object of the currently authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Me
      tags:
      - Etc
  /ota:
    get:
      consumes:
      - application/json
      description: Logs in the current browser session by using the passed pre-obtained
        OTA token.
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: OTA Login
      tags:
      - OTA
  /privacyinfo:
    get:
      consumes:
      - application/json
      description: Returns general global privacy information.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Privacy'
      summary: Privacy Information
      tags:
      - Etc
  /public/guilds/{id}:
    get:
      consumes:
      - application/json
      description: Returns public guild information, if enabled by guild config.
      parameters:
      - description: The Guild ID.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GuildReduced'
      summary: Get Public Guild
      tags:
      - Public
  /reports/{id}:
    get:
      consumes:
      - application/json
      description: Returns a single report object by its ID.
      parameters:
      - description: The report ID.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Report'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Report
      tags:
      - Reports
  /reports/{id}/revoke:
    post:
      consumes:
      - application/json
      description: Revokes a given report by ID.
      parameters:
      - description: The report ID.
        in: path
        name: id
        required: true
        type: string
      - description: The revoke reason payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.ReasonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Report'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Revoke Report
      tags:
      - Reports
  /search:
    get:
      consumes:
      - application/json
      description: Search through guilds and members by ID, name or displayname.
      parameters:
      - description: The search query (either ID, name or displayname).
        in: query
        name: query
        required: true
        type: string
      - default: 50
        description: The maximum amount of result items (per group).
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SearchResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: Global Search
      tags:
      - Search
  /settings/noguildinvite:
    get:
      consumes:
      - application/json
      description: Returns the settings status for the suggested guild invite when
        the logged in user is not on any guild with shinpuru.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.InviteSettingsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "409":
          description: Returned when no channel could be found to create invite for.
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get No Guild Invites Status
      tags:
      - Global Settings
    post:
      consumes:
      - application/json
      description: Set the status for the suggested guild invite when the logged in
        user is not on any guild with shinpuru.
      parameters:
      - description: Invite Settings Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.InviteSettingsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APITokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "409":
          description: Returned when no channel could be found to create invite for.
          schema:
            $ref: '#/definitions/models.Error'
      summary: Set No Guild Invites Status
      tags:
      - Global Settings
  /settings/presence:
    get:
      consumes:
      - application/json
      description: Returns the bot's displayed presence status.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presence.Presence'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Presence
      tags:
      - Global Settings
    post:
      consumes:
      - application/json
      description: Set the bot's displayed presence status.
      parameters:
      - description: Presence Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/presence.Presence'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APITokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Is returned when no token was generated before.
          schema:
            $ref: '#/definitions/models.Error'
      summary: Set Presence
      tags:
      - Global Settings
  /sysinfo:
    get:
      consumes:
      - application/json
      description: Returns general global system information.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SystemInfo'
      summary: System Information
      tags:
      - Etc
  /token:
    delete:
      consumes:
      - application/json
      description: Invalidates the currently generated API token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: API Token Deletion
      tags:
      - Tokens
    get:
      consumes:
      - application/json
      description: Returns general metadata information about a generated API token.
        The response does **not** contain the actual token!
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APITokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Is returned when no token was generated before.
          schema:
            $ref: '#/definitions/models.Error'
      summary: API Token Info
      tags:
      - Tokens
    post:
      consumes:
      - application/json
      description: (Re-)Generates and returns general metadata information about an
        API token **including** the actual API token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APITokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: API Token Generation
      tags:
      - Tokens
  /unbanrequests:
    get:
      consumes:
      - application/json
      description: Returns a list of unban requests created by the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.UnbanRequest'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Unban Requests
      tags:
      - Unban Requests
    post:
      consumes:
      - application/json
      description: Create an unban reuqest.
      parameters:
      - description: The unban request payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.UnbanRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UnbanRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Create Unban Requests
      tags:
      - Unban Requests
  /unbanrequests/bannedguilds:
    get:
      consumes:
      - application/json
      description: Returns a list of guilds where the currently authenticated user
        is banned.
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.GuildReduced'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Banned Guilds
      tags:
      - Unban Requests
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Returns the information of a user by ID.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: User
      tags:
      - Users
  /usersettings/flush:
    post:
      consumes:
      - application/json
      description: Flush all user data.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UsersettingsOTA'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
      summary: FLush all user data
      tags:
      - User Settings
  /usersettings/ota:
    get:
      consumes:
      - application/json
      description: Returns the current state of the OTA user setting.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UsersettingsOTA'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get OTA Usersettings State
      tags:
      - User Settings
    post:
      consumes:
      - application/json
      description: Update the OTA user settings state.
      parameters:
      - description: The OTA settings payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.UsersettingsOTA'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UsersettingsOTA'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Update OTA Usersettings State
      tags:
      - User Settings
  /usersettings/privacy:
    get:
      consumes:
      - application/json
      description: Returns the current Privacy user settinga.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UsersettingsPrivacy'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Get Privacy Usersettings
      tags:
      - User Settings
    post:
      consumes:
      - application/json
      description: Update the Privacy user settings.
      parameters:
      - description: The privacy settings payload.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.UsersettingsPrivacy'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UsersettingsPrivacy'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Error'
      summary: Update Privacy Usersettings
      tags:
      - User Settings
  /util/color/{hexcode}:
    get:
      consumes:
      - application/json
      description: Produces a square image of the given color and size.
      parameters:
      - description: Hex Code of the Color to produce
        in: path
        name: hexcode
        required: true
        type: string
      - default: 24
        description: The dimension of the square image
        in: query
        name: size
        type: integer
      produces:
      - image/png
      responses:
        "200":
          description: OK
          schema:
            type: file
      summary: Color Generator
      tags:
      - Utilities
  /util/commands:
    get:
      consumes:
      - application/json
      description: Returns a list of registered commands and their description.
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.CommandInfo'
            type: array
      summary: Command List
      tags:
      - Utilities
  /util/landingpageinfo:
    get:
      consumes:
      - application/json
      description: Returns general information for the landing page like the local
        invite parameters.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LandingPageResponse'
      summary: Landing Page Info
      tags:
      - Utilities
  /util/slashcommands:
    get:
      consumes:
      - application/json
      description: Returns a list of registered slash commands and their description.
      produces:
      - application/json
      responses:
        "200":
          description: Wrapped in models.ListResponse
          schema:
            items:
              $ref: '#/definitions/models.SlashCommandInfo'
            type: array
      summary: Slash Command List
      tags:
      - Utilities
  /verification/sitekey:
    get:
      consumes:
      - application/json
      description: Returns the sitekey for the captcha
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CaptchaSiteKey'
      summary: Sitekey
      tags:
      - Verification
  /verification/verify:
    post:
      consumes:
      - application/json
      description: Verify a returned verification token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Status'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Error'
      summary: Verify
      tags:
      - Verification
swagger: "2.0"
tags:
- description: General root API functionalities.
  name: Etc
- description: General utility functionalities.
  name: Utilities
- description: Authorization endpoints.
  name: Authorization
- description: One Time Auth token endpoints.
  name: OTA
- description: Public API endpoints.
  name: Public
- description: Search endpoints.
  name: Search
- description: API token endpoints.
  name: Tokens
- description: Global bot settings endpoints.
  name: Global Settings
- description: General reports endpoints.
  name: Reports
- description: Guild specific endpoints.
  name: Guilds
- description: Guild backup endpoints.
  name: Guild Backups
- description: Unban requests endpoints.
  name: Unban Requests
- description: User specific settings endpoints.
  name: User Settings
- description: Member reporting endpoints.
  name: Member Reporting
- description: Members specific endpoints.
  name: Members
- description: Channels specific endpoints.
  name: Channels
- description: User verification endpoints.
  name: Verification
