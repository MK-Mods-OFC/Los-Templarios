{
    "swagger": "2.0",
    "info": {
        "description": "The shinpuru main REST API.",
        "title": "shinpuru main API",
        "contact": {},
        "version": "1.0"
    },
    "basePath": "/api/v1",
    "paths": {
        "/auth/accesstoken": {
            "post": {
                "description": "Exchanges the cookie-passed refresh token with a generated access token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Access Token Exchange",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AccessTokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/auth/check": {
            "get": {
                "description": "Returns OK if the request is authorized.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Authorization Check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Reovkes the currently used access token and clears the refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Logout",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    }
                }
            }
        },
        "/channels/{guildid}": {
            "get": {
                "description": "Returns a list of channels the user has access to.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Channels"
                ],
                "summary": "Get Allowed Channels",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "guildid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/discordgo.Message"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/channels/{guildid}/{id}": {
            "post": {
                "description": "Send an Embed Message into a specified Channel.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Channels"
                ],
                "summary": "Send Embed Message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "guildid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the channel.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The message embed object.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/discordgo.MessageEmbed"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/discordgo.Message"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/channels/{guildid}/{id}/{msgid}": {
            "post": {
                "description": "Update an Embed Message in a specified Channel with the given message ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Channels"
                ],
                "summary": "Update Embed Message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "guildid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the channel.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the message.",
                        "name": "msgid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The message embed object.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/discordgo.MessageEmbed"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discordgo.Message"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds": {
            "get": {
                "description": "Returns a list of guilds the authenticated user has in common with shinpuru.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "List Guilds",
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.GuildReduced"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}": {
            "get": {
                "description": "Returns a single guild object by it's ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Guild",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Guild"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/antiraid/joinlog": {
            "get": {
                "description": "Returns a list of joined members during an antiraid trigger.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Antiraid Joinlog",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.JoinLogEntry"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes all entries of the antiraid joinlog.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Reset Antiraid Joinlog",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/backups": {
            "get": {
                "description": "Returns a list of guild backups.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guild Backups"
                ],
                "summary": "Get Guild Backups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/backupmodels.Entry"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/backups/toggle": {
            "post": {
                "description": "Toggle guild backup enable state.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guild Backups"
                ],
                "summary": "Toggle Guild Backup Enable",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Enable state payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EnableStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/backups/{backupid}/download": {
            "get": {
                "description": "Download a single gziped backup file.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/gzip"
                ],
                "tags": [
                    "Guild Backups"
                ],
                "summary": "Download Backup File",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the backup.",
                        "name": "backupid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The previously obtained OTA token to authorize the download.",
                        "name": "ota_token",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Returns an OTA key which is used to download a backup entry.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guild Backups"
                ],
                "summary": "Obtain Backup Download OTA Key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the backup.",
                        "name": "backupid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AccessTokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/inviteblock": {
            "post": {
                "description": "Toggle enabled state of the guild invite block system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Toggle Guild Inviteblock Enable",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The enable status payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EnableStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/members": {
            "get": {
                "description": "Returns a list of guild members.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Get Guild Member List",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request members after the given member ID.",
                        "name": "after",
                        "in": "query"
                    },
                    {
                        "maximum": 1000,
                        "minimum": 1,
                        "type": "integer",
                        "default": 100,
                        "description": "The amount of results returned.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wraped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Member"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/permissions": {
            "get": {
                "description": "Returns the specified guild permission settings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Guild Permission Settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PermissionsMap"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Apply a new guild permission rule for a specified role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Apply Guild Permission Rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The permission rule payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PermissionsUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/reports": {
            "get": {
                "description": "Returns a list of guild modlog entries for the given guild.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Guild Modlog",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The offset of returned entries",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The amount of returned entries (0 = all)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Report"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/reports/count": {
            "get": {
                "description": "Returns the total count of entries in the guild mod log.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Guild Modlog Count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Count"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/scoreboard": {
            "get": {
                "description": "Returns a list of scoreboard entries for the given guild.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Guild Scoreboard",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 25,
                        "description": "Limit the amount of result values",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.GuildKarmaEntry"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/settings": {
            "get": {
                "description": "Returns the specified general guild settings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Guild Settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.GuildSettings"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Returns the specified general guild settings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Guild Settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Modified guild settings payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GuildSettings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/settings/antiraid": {
            "get": {
                "description": "Returns the specified guild antiraid settings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Guild Antiraid Settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AntiraidSettings"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Update the guild antiraid settings specification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Update Guild Antiraid Settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The guild antiraid settings payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AntiraidSettings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/settings/antiraid/action": {
            "post": {
                "description": "Execute a specific action on antiraid listed users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Guild Antiraid Bulk Action",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The antiraid action payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AntiraidAction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/settings/api": {
            "get": {
                "description": "Returns the settings state of the Guild API.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Guild Settings API State",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.GuildAPISettings"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Set the settings state of the Guild API.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Set Guild Settings API State",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The guild API settings payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GuildAPISettingsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.GuildAPISettings"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/settings/codeexec": {
            "get": {
                "description": "Returns the settings state of the Guild Code Exec.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Guild Settings Code Exec State",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.EnableStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Set the settings state of the Guild Code Exec.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Set Guild Settings Code Exec State",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The guild API settings payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EnableStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.EnableStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/settings/flushguilddata": {
            "post": {
                "description": "Flushes all guild data from the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Flush Guild Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The guild flush payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.FlushGuildRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.State"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/settings/karma": {
            "get": {
                "description": "Returns the specified guild karma settings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Guild Karma Settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.KarmaSettings"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Update the guild karma settings specification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Update Guild Karma Settings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The guild karma settings payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.KarmaSettings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/settings/karma/blocklist": {
            "get": {
                "description": "Returns the specified guild karma blocklist entries.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Guild Karma Blocklist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Member"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/settings/karma/blocklist/{memberid}": {
            "put": {
                "description": "Add a guild karma blocklist entry.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Add Guild Karma Blocklist Entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "memberid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a guild karma blocklist entry.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Remove Guild Karma Blocklist Entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "memberid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/settings/karma/rules": {
            "get": {
                "description": "Returns a list of specified guild karma rules.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Guild Settings Karma Rules",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.KarmaRule"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a guild karma rule.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Create Guild Settings Karma",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The karma rule payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.KarmaRule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.KarmaRule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/settings/karma/rules/{ruleid}": {
            "post": {
                "description": "Update a karma rule by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Update Guild Settings Karma",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the rule.",
                        "name": "ruleid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The karma rule update payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.KarmaRule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.KarmaRule"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a guild karma rule by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Remove Guild Settings Karma",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the rule.",
                        "name": "ruleid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.State"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/settings/logs": {
            "get": {
                "description": "Returns the total or filtered count of guild log entries.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Guild Log Count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Count"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete all guild log entries.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Delete Guild Log Entries",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.State"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/settings/logs/state": {
            "get": {
                "description": "Returns the enabled state of the guild log setting.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Guild Settings Log State",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.State"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Update the enabled state of the log state guild setting.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Update Guild Settings Log State",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The state payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.State"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.State"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/settings/logs/{entryid}": {
            "delete": {
                "description": "Delete a single log entry.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Delete Guild Log Entries",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the entry to be deleted.",
                        "name": "entryid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.State"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/settings/verification": {
            "get": {
                "description": "Returns the settings state of the Guild Verification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Guild Settings Verification State",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.EnableStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Set the settings state of the Guild Verification.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Set Guild Settings Verification State",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The guild API settings payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EnableStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.EnableStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/starboard": {
            "get": {
                "description": "Returns a list of starboard entries for the given guild.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Guild Starboard",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.StarboardEntryResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/unbanrequests": {
            "get": {
                "description": "Returns the list of the guild unban requests.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Guild Unbanrequests",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListReponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UnbanRequest"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/unbanrequests/count": {
            "get": {
                "description": "Returns the total or filtered count of guild unban requests.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Guild Unbanrequests Count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Count"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/unbanrequests/{requestid}": {
            "get": {
                "description": "Returns a single guild unban request by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Get Single Guild Unbanrequest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the unbanrequest.",
                        "name": "requestid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UnbanRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Process a guild unban request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Guilds"
                ],
                "summary": "Process Guild Unbanrequest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the unbanrequest.",
                        "name": "requestid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UnbanRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/{memberid}": {
            "get": {
                "description": "Returns a single guild member by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Get Guild Member",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the member.",
                        "name": "memberid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Member"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/{memberid}/ban": {
            "post": {
                "description": "Creates a member ban report.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Member Reporting"
                ],
                "summary": "Create A Member Ban Report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the victim member.",
                        "name": "memberid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The report payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReasonRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Report"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/{memberid}/kick": {
            "post": {
                "description": "Creates a member kick report.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Member Reporting"
                ],
                "summary": "Create A Member Kick Report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the victim member.",
                        "name": "memberid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The report payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReasonRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Report"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/{memberid}/mute": {
            "post": {
                "description": "Unmute a muted member.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Member Reporting"
                ],
                "summary": "Unmute A Member",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the victim member.",
                        "name": "memberid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The unmute payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReasonRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/{memberid}/permissions": {
            "get": {
                "description": "Returns the permission array of the given user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Get Guild Member Permissions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the member.",
                        "name": "memberid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.PermissionsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/{memberid}/permissions/allowed": {
            "get": {
                "description": "Returns all detailed permission DNS which the member is alloed to perform.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Get Guild Member Allowed Permissions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the member.",
                        "name": "memberid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/{memberid}/reports": {
            "get": {
                "description": "Returns a list of reports of the given member.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Get Guild Member Reports",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the member.",
                        "name": "memberid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 100,
                        "description": "The amount of results returned.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "The amount of results to be skipped.",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Report"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a member report.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Member Reporting"
                ],
                "summary": "Create A Member Report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the victim member.",
                        "name": "memberid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The report payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Report"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/{memberid}/reports/count": {
            "get": {
                "description": "Returns the total count of reports of the given user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Get Guild Member Reports Count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the member.",
                        "name": "memberid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Count"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/{memberid}/unbanrequests": {
            "get": {
                "description": "Returns the list of unban requests of the given member",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Get Guild Member Unban Requests",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the member.",
                        "name": "memberid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UnbanRequest"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/guilds/{id}/{memberid}/unbanrequests/count": {
            "get": {
                "description": "Returns the total or filtered count of unban requests of the given member.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Get Guild Member Unban Requests Count",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the guild.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the member.",
                        "name": "memberid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Count"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/me": {
            "get": {
                "description": "Returns the user object of the currently authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Etc"
                ],
                "summary": "Me",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                }
            }
        },
        "/ota": {
            "get": {
                "description": "Logs in the current browser session by using the passed pre-obtained OTA token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OTA"
                ],
                "summary": "OTA Login",
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/privacyinfo": {
            "get": {
                "description": "Returns general global privacy information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Etc"
                ],
                "summary": "Privacy Information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Privacy"
                        }
                    }
                }
            }
        },
        "/public/guilds/{id}": {
            "get": {
                "description": "Returns public guild information, if enabled by guild config.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public"
                ],
                "summary": "Get Public Guild",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The Guild ID.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.GuildReduced"
                        }
                    }
                }
            }
        },
        "/reports/{id}": {
            "get": {
                "description": "Returns a single report object by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Get Report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The report ID.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Report"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/reports/{id}/revoke": {
            "post": {
                "description": "Revokes a given report by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Revoke Report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The report ID.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The revoke reason payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ReasonRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Report"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/search": {
            "get": {
                "description": "Search through guilds and members by ID, name or displayname.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Global Search",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The search query (either ID, name or displayname).",
                        "name": "query",
                        "in": "query",
                        "required": true
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 50,
                        "description": "The maximum amount of result items (per group).",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SearchResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/settings/noguildinvite": {
            "get": {
                "description": "Returns the settings status for the suggested guild invite when the logged in user is not on any guild with shinpuru.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Global Settings"
                ],
                "summary": "Get No Guild Invites Status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.InviteSettingsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "409": {
                        "description": "Returned when no channel could be found to create invite for.",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Set the status for the suggested guild invite when the logged in user is not on any guild with shinpuru.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Global Settings"
                ],
                "summary": "Set No Guild Invites Status",
                "parameters": [
                    {
                        "description": "Invite Settings Payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.InviteSettingsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.APITokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "409": {
                        "description": "Returned when no channel could be found to create invite for.",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/settings/presence": {
            "get": {
                "description": "Returns the bot's displayed presence status.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Global Settings"
                ],
                "summary": "Get Presence",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presence.Presence"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Set the bot's displayed presence status.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Global Settings"
                ],
                "summary": "Set Presence",
                "parameters": [
                    {
                        "description": "Presence Payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presence.Presence"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.APITokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Is returned when no token was generated before.",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/sysinfo": {
            "get": {
                "description": "Returns general global system information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Etc"
                ],
                "summary": "System Information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SystemInfo"
                        }
                    }
                }
            }
        },
        "/token": {
            "get": {
                "description": "Returns general metadata information about a generated API token. The response does **not** contain the actual token!",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tokens"
                ],
                "summary": "API Token Info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.APITokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Is returned when no token was generated before.",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "(Re-)Generates and returns general metadata information about an API token **including** the actual API token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tokens"
                ],
                "summary": "API Token Generation",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.APITokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Invalidates the currently generated API token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tokens"
                ],
                "summary": "API Token Deletion",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/unbanrequests": {
            "get": {
                "description": "Returns a list of unban requests created by the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unban Requests"
                ],
                "summary": "Get Unban Requests",
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UnbanRequest"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Create an unban reuqest.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unban Requests"
                ],
                "summary": "Create Unban Requests",
                "parameters": [
                    {
                        "description": "The unban request payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UnbanRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UnbanRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/unbanrequests/bannedguilds": {
            "get": {
                "description": "Returns a list of guilds where the currently authenticated user is banned.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unban Requests"
                ],
                "summary": "Get Banned Guilds",
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.GuildReduced"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Returns the information of a user by ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "User",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                }
            }
        },
        "/usersettings/flush": {
            "post": {
                "description": "Flush all user data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Settings"
                ],
                "summary": "FLush all user data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UsersettingsOTA"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/usersettings/ota": {
            "get": {
                "description": "Returns the current state of the OTA user setting.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Settings"
                ],
                "summary": "Get OTA Usersettings State",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UsersettingsOTA"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Update the OTA user settings state.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Settings"
                ],
                "summary": "Update OTA Usersettings State",
                "parameters": [
                    {
                        "description": "The OTA settings payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UsersettingsOTA"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UsersettingsOTA"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/usersettings/privacy": {
            "get": {
                "description": "Returns the current Privacy user settinga.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Settings"
                ],
                "summary": "Get Privacy Usersettings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UsersettingsPrivacy"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Update the Privacy user settings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Settings"
                ],
                "summary": "Update Privacy Usersettings",
                "parameters": [
                    {
                        "description": "The privacy settings payload.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UsersettingsPrivacy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UsersettingsPrivacy"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        },
        "/util/color/{hexcode}": {
            "get": {
                "description": "Produces a square image of the given color and size.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "image/png"
                ],
                "tags": [
                    "Utilities"
                ],
                "summary": "Color Generator",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Hex Code of the Color to produce",
                        "name": "hexcode",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 24,
                        "description": "The dimension of the square image",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    }
                }
            }
        },
        "/util/commands": {
            "get": {
                "description": "Returns a list of registered commands and their description.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Utilities"
                ],
                "summary": "Command List",
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.CommandInfo"
                            }
                        }
                    }
                }
            }
        },
        "/util/landingpageinfo": {
            "get": {
                "description": "Returns general information for the landing page like the local invite parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Utilities"
                ],
                "summary": "Landing Page Info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.LandingPageResponse"
                        }
                    }
                }
            }
        },
        "/util/slashcommands": {
            "get": {
                "description": "Returns a list of registered slash commands and their description.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Utilities"
                ],
                "summary": "Slash Command List",
                "responses": {
                    "200": {
                        "description": "Wrapped in models.ListResponse",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.SlashCommandInfo"
                            }
                        }
                    }
                }
            }
        },
        "/verification/sitekey": {
            "get": {
                "description": "Returns the sitekey for the captcha",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Verification"
                ],
                "summary": "Sitekey",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.CaptchaSiteKey"
                        }
                    }
                }
            }
        },
        "/verification/verify": {
            "post": {
                "description": "Verify a returned verification token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Verification"
                ],
                "summary": "Verify",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Status"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/models.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "backupmodels.Entry": {
            "type": "object",
            "properties": {
                "file_id": {
                    "type": "string"
                },
                "guild_id": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "discordgo.ApplicationCommandOption": {
            "type": "object",
            "properties": {
                "autocomplete": {
                    "description": "NOTE: mutually exclusive with Choices.",
                    "type": "boolean"
                },
                "channel_types": {
                    "description": "NOTE: This feature was on the API, but at some point developers decided to remove it.\nSo I commented it, until it will be officially on the docs.\nDefault     bool                              `json:\"default\"`",
                    "type": "array",
                    "items": {
                        "description": "The type of the channel.",
                        "type": "integer"
                    }
                },
                "choices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/discordgo.ApplicationCommandOptionChoice"
                    }
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/discordgo.ApplicationCommandOption"
                    }
                },
                "required": {
                    "type": "boolean"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "discordgo.ApplicationCommandOptionChoice": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "object"
                }
            }
        },
        "discordgo.Channel": {
            "type": "object",
            "properties": {
                "application_id": {
                    "description": "ApplicationID of the DM creator Zeroed if guild channel or not a bot user",
                    "type": "string"
                },
                "bitrate": {
                    "description": "The bitrate of the channel, if it is a voice channel.",
                    "type": "integer"
                },
                "guild_id": {
                    "description": "The ID of the guild to which the channel belongs, if it is in a guild.\nElse, this ID is empty (e.g. DM channels).",
                    "type": "string"
                },
                "icon": {
                    "description": "Icon of the group DM channel.",
                    "type": "string"
                },
                "id": {
                    "description": "The ID of the channel.",
                    "type": "string"
                },
                "last_message_id": {
                    "description": "The ID of the last message sent in the channel. This is not\nguaranteed to be an ID of a valid message.",
                    "type": "string"
                },
                "last_pin_timestamp": {
                    "description": "The timestamp of the last pinned message in the channel.\nnil if the channel has no pinned messages.",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the channel.",
                    "type": "string"
                },
                "nsfw": {
                    "description": "Whether the channel is marked as NSFW.",
                    "type": "boolean"
                },
                "owner_id": {
                    "description": "ID of the DM creator Zeroed if guild channel",
                    "type": "string"
                },
                "parent_id": {
                    "description": "The ID of the parent channel, if the channel is under a category",
                    "type": "string"
                },
                "permission_overwrites": {
                    "description": "A list of permission overwrites present for the channel.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/discordgo.PermissionOverwrite"
                    }
                },
                "position": {
                    "description": "The position of the channel, used for sorting in client.",
                    "type": "integer"
                },
                "rate_limit_per_user": {
                    "description": "Amount of seconds a user has to wait before sending another message (0-21600)\nbots, as well as users with the permission manage_messages or manage_channel, are unaffected",
                    "type": "integer"
                },
                "recipients": {
                    "description": "The recipients of the channel. This is only populated in DM channels.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/discordgo.User"
                    }
                },
                "topic": {
                    "description": "The topic of the channel.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the channel.",
                    "type": "integer"
                },
                "user_limit": {
                    "description": "The user limit of the voice channel.",
                    "type": "integer"
                }
            }
        },
        "discordgo.Emoji": {
            "type": "object",
            "properties": {
                "animated": {
                    "type": "boolean"
                },
                "available": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "managed": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "require_colons": {
                    "type": "boolean"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user": {
                    "$ref": "#/definitions/discordgo.User"
                }
            }
        },
        "discordgo.Member": {
            "type": "object",
            "properties": {
                "communication_disabled_until": {
                    "description": "The time at which the member's timeout will expire.\nTime in the past or nil if the user is not timed out.",
                    "type": "string"
                },
                "deaf": {
                    "description": "Whether the member is deafened at a guild level.",
                    "type": "boolean"
                },
                "guild_id": {
                    "description": "The guild ID on which the member exists.",
                    "type": "string"
                },
                "joined_at": {
                    "description": "The time at which the member joined the guild.",
                    "type": "string"
                },
                "mute": {
                    "description": "Whether the member is muted at a guild level.",
                    "type": "boolean"
                },
                "nick": {
                    "description": "The nickname of the member, if they have one.",
                    "type": "string"
                },
                "pending": {
                    "description": "Is true while the member hasn't accepted the membership screen.",
                    "type": "boolean"
                },
                "permissions": {
                    "description": "Total permissions of the member in the channel, including overrides, returned when in the interaction object.",
                    "type": "string",
                    "example": "0"
                },
                "premium_since": {
                    "description": "When the user used their Nitro boost on the server",
                    "type": "string"
                },
                "roles": {
                    "description": "A list of IDs of the roles which are possessed by the member.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user": {
                    "description": "The underlying user on which the member is based.",
                    "$ref": "#/definitions/discordgo.User"
                }
            }
        },
        "discordgo.Message": {
            "type": "object",
            "properties": {
                "activity": {
                    "description": "Is sent with Rich Presence-related chat embeds",
                    "$ref": "#/definitions/discordgo.MessageActivity"
                },
                "application": {
                    "description": "Is sent with Rich Presence-related chat embeds",
                    "$ref": "#/definitions/discordgo.MessageApplication"
                },
                "attachments": {
                    "description": "A list of attachments present in the message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/discordgo.MessageAttachment"
                    }
                },
                "author": {
                    "description": "The author of the message. This is not guaranteed to be a\nvalid user (webhook-sent messages do not possess a full author).",
                    "$ref": "#/definitions/discordgo.User"
                },
                "channel_id": {
                    "description": "The ID of the channel in which the message was sent.",
                    "type": "string"
                },
                "content": {
                    "description": "The content of the message.",
                    "type": "string"
                },
                "edited_timestamp": {
                    "description": "The time at which the last edit of the message\noccurred, if it has been edited.",
                    "type": "string"
                },
                "embeds": {
                    "description": "A list of embeds present in the message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/discordgo.MessageEmbed"
                    }
                },
                "flags": {
                    "description": "The flags of the message, which describe extra features of a message.\nThis is a combination of bit masks; the presence of a certain permission can\nbe checked by performing a bitwise AND between this int and the flag.",
                    "type": "integer"
                },
                "guild_id": {
                    "description": "The ID of the guild in which the message was sent.",
                    "type": "string"
                },
                "id": {
                    "description": "The ID of the message.",
                    "type": "string"
                },
                "member": {
                    "description": "Member properties for this message's author,\ncontains only partial information",
                    "$ref": "#/definitions/discordgo.Member"
                },
                "mention_channels": {
                    "description": "Channels specifically mentioned in this message\nNot all channel mentions in a message will appear in mention_channels.\nOnly textual channels that are visible to everyone in a lurkable guild will ever be included.\nOnly crossposted messages (via Channel Following) currently include mention_channels at all.\nIf no mentions in the message meet these requirements, this field will not be sent.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/discordgo.Channel"
                    }
                },
                "mention_everyone": {
                    "description": "Whether the message mentions everyone.",
                    "type": "boolean"
                },
                "mention_roles": {
                    "description": "The roles mentioned in the message.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mentions": {
                    "description": "A list of users mentioned in the message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/discordgo.User"
                    }
                },
                "message_reference": {
                    "description": "MessageReference contains reference data sent with crossposted or reply messages.\nThis does not contain the reference *to* this message; this is for when *this* message references another.\nTo generate a reference to this message, use (*Message).Reference().",
                    "$ref": "#/definitions/discordgo.MessageReference"
                },
                "pinned": {
                    "description": "Whether the message is pinned or not.",
                    "type": "boolean"
                },
                "reactions": {
                    "description": "A list of reactions to the message.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/discordgo.MessageReactions"
                    }
                },
                "timestamp": {
                    "description": "The time at which the messsage was sent.\nCAUTION: this field may be removed in a\nfuture API version; it is safer to calculate\nthe creation time via the ID.",
                    "type": "string"
                },
                "tts": {
                    "description": "Whether the message is text-to-speech.",
                    "type": "boolean"
                },
                "type": {
                    "description": "The type of the message.",
                    "type": "integer"
                },
                "webhook_id": {
                    "description": "The webhook ID of the message, if it was generated by a webhook",
                    "type": "string"
                }
            }
        },
        "discordgo.MessageActivity": {
            "type": "object",
            "properties": {
                "party_id": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "discordgo.MessageApplication": {
            "type": "object",
            "properties": {
                "cover_image": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "discordgo.MessageAttachment": {
            "type": "object",
            "properties": {
                "ephemeral": {
                    "type": "boolean"
                },
                "filename": {
                    "type": "string"
                },
                "height": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "proxy_url": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "discordgo.MessageEmbed": {
            "type": "object",
            "properties": {
                "author": {
                    "$ref": "#/definitions/discordgo.MessageEmbedAuthor"
                },
                "color": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/discordgo.MessageEmbedField"
                    }
                },
                "footer": {
                    "$ref": "#/definitions/discordgo.MessageEmbedFooter"
                },
                "image": {
                    "$ref": "#/definitions/discordgo.MessageEmbedImage"
                },
                "provider": {
                    "$ref": "#/definitions/discordgo.MessageEmbedProvider"
                },
                "thumbnail": {
                    "$ref": "#/definitions/discordgo.MessageEmbedThumbnail"
                },
                "timestamp": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "video": {
                    "$ref": "#/definitions/discordgo.MessageEmbedVideo"
                }
            }
        },
        "discordgo.MessageEmbedAuthor": {
            "type": "object",
            "properties": {
                "icon_url": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "proxy_icon_url": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "discordgo.MessageEmbedField": {
            "type": "object",
            "properties": {
                "inline": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "discordgo.MessageEmbedFooter": {
            "type": "object",
            "properties": {
                "icon_url": {
                    "type": "string"
                },
                "proxy_icon_url": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "discordgo.MessageEmbedImage": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "proxy_url": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "discordgo.MessageEmbedProvider": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "discordgo.MessageEmbedThumbnail": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "proxy_url": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "discordgo.MessageEmbedVideo": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "discordgo.MessageReactions": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "emoji": {
                    "$ref": "#/definitions/discordgo.Emoji"
                },
                "me": {
                    "type": "boolean"
                }
            }
        },
        "discordgo.MessageReference": {
            "type": "object",
            "properties": {
                "channel_id": {
                    "type": "string"
                },
                "guild_id": {
                    "type": "string"
                },
                "message_id": {
                    "type": "string"
                }
            }
        },
        "discordgo.PermissionOverwrite": {
            "type": "object",
            "properties": {
                "allow": {
                    "type": "string",
                    "example": "0"
                },
                "deny": {
                    "type": "string",
                    "example": "0"
                },
                "id": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "discordgo.Role": {
            "type": "object",
            "properties": {
                "color": {
                    "description": "The hex color of this role.",
                    "type": "integer"
                },
                "hoist": {
                    "description": "Whether this role is hoisted (shows up separately in member list).",
                    "type": "boolean"
                },
                "id": {
                    "description": "The ID of the role.",
                    "type": "string"
                },
                "managed": {
                    "description": "Whether this role is managed by an integration, and\nthus cannot be manually added to, or taken from, members.",
                    "type": "boolean"
                },
                "mentionable": {
                    "description": "Whether this role is mentionable.",
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the role.",
                    "type": "string"
                },
                "permissions": {
                    "description": "The permissions of the role on the guild (doesn't include channel overrides).\nThis is a combination of bit masks; the presence of a certain permission can\nbe checked by performing a bitwise AND between this int and the permission.",
                    "type": "string",
                    "example": "0"
                },
                "position": {
                    "description": "The position of this role in the guild's role hierarchy.",
                    "type": "integer"
                }
            }
        },
        "discordgo.User": {
            "type": "object",
            "properties": {
                "avatar": {
                    "description": "The hash of the user's avatar. Use Session.UserAvatar\nto retrieve the avatar itself.",
                    "type": "string"
                },
                "bot": {
                    "description": "Whether the user is a bot.",
                    "type": "boolean"
                },
                "discriminator": {
                    "description": "The discriminator of the user (4 numbers after name).",
                    "type": "string"
                },
                "email": {
                    "description": "The email of the user. This is only present when\nthe application possesses the email scope for the user.",
                    "type": "string"
                },
                "flags": {
                    "description": "The flags on a user's account.\nOnly available when the request is authorized via a Bearer token.",
                    "type": "integer"
                },
                "id": {
                    "description": "The ID of the user.",
                    "type": "string"
                },
                "locale": {
                    "description": "The user's chosen language option.",
                    "type": "string"
                },
                "mfa_enabled": {
                    "description": "Whether the user has multi-factor authentication enabled.",
                    "type": "boolean"
                },
                "premium_type": {
                    "description": "The type of Nitro subscription on a user's account.\nOnly available when the request is authorized via a Bearer token.",
                    "type": "integer"
                },
                "public_flags": {
                    "description": "The public flags on a user's account.\nThis is a combination of bit masks; the presence of a certain flag can\nbe checked by performing a bitwise AND between this int and the flag.",
                    "type": "integer"
                },
                "system": {
                    "description": "Whether the user is an Official Discord System user (part of the urgent message system).",
                    "type": "boolean"
                },
                "token": {
                    "description": "The token of the user. This is only present for\nthe user represented by the current session.",
                    "type": "string"
                },
                "username": {
                    "description": "The user's username.",
                    "type": "string"
                },
                "verified": {
                    "description": "Whether the user's email is verified.",
                    "type": "boolean"
                }
            }
        },
        "models.APITokenResponse": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "expires": {
                    "type": "string"
                },
                "hits": {
                    "type": "integer"
                },
                "last_access": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "models.AccessTokenResponse": {
            "type": "object",
            "properties": {
                "expires": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "models.AntiraidAction": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "models.AntiraidSettings": {
            "type": "object",
            "properties": {
                "burst": {
                    "type": "integer"
                },
                "regeneration_period": {
                    "type": "integer"
                },
                "state": {
                    "type": "boolean"
                },
                "verification": {
                    "type": "boolean"
                }
            }
        },
        "models.CaptchaSiteKey": {
            "type": "object",
            "properties": {
                "sitekey": {
                    "type": "string"
                }
            }
        },
        "models.CommandInfo": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "domain_name": {
                    "type": "string"
                },
                "group": {
                    "type": "string"
                },
                "help": {
                    "type": "string"
                },
                "invokes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_executable_in_dm": {
                    "type": "boolean"
                },
                "sub_permission_rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/shireikan.SubPermission"
                    }
                }
            }
        },
        "models.Contact": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "models.Count": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                }
            }
        },
        "models.EnableStatus": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "models.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "context": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "models.FlatUser": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "bot": {
                    "type": "boolean"
                },
                "discriminator": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.FlushGuildRequest": {
            "type": "object",
            "properties": {
                "leave_after": {
                    "type": "boolean"
                },
                "validation": {
                    "type": "string"
                }
            }
        },
        "models.Guild": {
            "type": "object",
            "properties": {
                "afk_channel_id": {
                    "type": "string"
                },
                "backups_enabled": {
                    "type": "boolean"
                },
                "banner": {
                    "type": "string"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/discordgo.Channel"
                    }
                },
                "description": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "icon_url": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invite_block_enabled": {
                    "type": "boolean"
                },
                "joined_at": {
                    "type": "string"
                },
                "large": {
                    "type": "boolean"
                },
                "latest_backup_entry": {
                    "type": "string"
                },
                "member_count": {
                    "type": "integer"
                },
                "mfa_level": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                },
                "premium_subscription_count": {
                    "type": "integer"
                },
                "premium_tier": {
                    "type": "integer"
                },
                "region": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/discordgo.Role"
                    }
                },
                "self_member": {
                    "$ref": "#/definitions/models.Member"
                },
                "splash": {
                    "type": "string"
                },
                "unavailable": {
                    "type": "boolean"
                },
                "verification_level": {
                    "type": "integer"
                }
            }
        },
        "models.GuildAPISettings": {
            "type": "object",
            "properties": {
                "allowed_origins": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "protected": {
                    "type": "boolean"
                },
                "token_hash": {
                    "type": "string"
                }
            }
        },
        "models.GuildAPISettingsRequest": {
            "type": "object",
            "properties": {
                "allowed_origins": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "protected": {
                    "type": "boolean"
                },
                "reset_token": {
                    "type": "boolean"
                },
                "token": {
                    "type": "string"
                },
                "token_hash": {
                    "type": "string"
                }
            }
        },
        "models.GuildKarmaEntry": {
            "type": "object",
            "properties": {
                "member": {
                    "$ref": "#/definitions/models.Member"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "models.GuildLogEntry": {
            "type": "object",
            "properties": {
                "guildid": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "module": {
                    "type": "string"
                },
                "severity": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "models.GuildReduced": {
            "type": "object",
            "properties": {
                "icon": {
                    "type": "string"
                },
                "icon_url": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "joined_at": {
                    "type": "string"
                },
                "member_count": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "online_member_count": {
                    "type": "integer"
                },
                "owner_id": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                }
            }
        },
        "models.GuildSettings": {
            "type": "object",
            "properties": {
                "autoroles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "joinmessagechannel": {
                    "type": "string"
                },
                "joinmessagetext": {
                    "type": "string"
                },
                "leavemessagechannel": {
                    "type": "string"
                },
                "leavemessagetext": {
                    "type": "string"
                },
                "modlogchannel": {
                    "type": "string"
                },
                "perms": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "prefix": {
                    "type": "string"
                },
                "voicelogchannel": {
                    "type": "string"
                }
            }
        },
        "models.InviteSettingsRequest": {
            "type": "object",
            "properties": {
                "guild_id": {
                    "type": "string"
                },
                "invite_code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.InviteSettingsResponse": {
            "type": "object",
            "properties": {
                "guild": {
                    "$ref": "#/definitions/models.Guild"
                },
                "invite_url": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.JoinLogEntry": {
            "type": "object",
            "properties": {
                "account_created": {
                    "type": "string"
                },
                "guild_id": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.KarmaRule": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "argument": {
                    "type": "string"
                },
                "guildid": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "trigger": {
                    "type": "integer"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "models.KarmaSettings": {
            "type": "object",
            "properties": {
                "emotes_decrease": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "emotes_increase": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "penalty": {
                    "type": "boolean"
                },
                "state": {
                    "type": "boolean"
                },
                "tokens": {
                    "type": "integer"
                }
            }
        },
        "models.LandingPageResponse": {
            "type": "object",
            "properties": {
                "localinvite": {
                    "type": "string"
                },
                "publiccaranyinvite": {
                    "type": "string"
                },
                "publicmaininvite": {
                    "type": "string"
                }
            }
        },
        "models.Member": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "chat_muted": {
                    "type": "boolean"
                },
                "communication_disabled_until": {
                    "description": "The time at which the member's timeout will expire.\nTime in the past or nil if the user is not timed out.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deaf": {
                    "description": "Whether the member is deafened at a guild level.",
                    "type": "boolean"
                },
                "dominance": {
                    "type": "integer"
                },
                "guild_id": {
                    "description": "The guild ID on which the member exists.",
                    "type": "string"
                },
                "guild_name": {
                    "type": "string"
                },
                "joined_at": {
                    "description": "The time at which the member joined the guild.",
                    "type": "string"
                },
                "karma": {
                    "type": "integer"
                },
                "karma_total": {
                    "type": "integer"
                },
                "mute": {
                    "description": "Whether the member is muted at a guild level.",
                    "type": "boolean"
                },
                "nick": {
                    "description": "The nickname of the member, if they have one.",
                    "type": "string"
                },
                "pending": {
                    "description": "Is true while the member hasn't accepted the membership screen.",
                    "type": "boolean"
                },
                "permissions": {
                    "description": "Total permissions of the member in the channel, including overrides, returned when in the interaction object.",
                    "type": "string",
                    "example": "0"
                },
                "premium_since": {
                    "description": "When the user used their Nitro boost on the server",
                    "type": "string"
                },
                "roles": {
                    "description": "A list of IDs of the roles which are possessed by the member.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user": {
                    "description": "The underlying user on which the member is based.",
                    "$ref": "#/definitions/discordgo.User"
                }
            }
        },
        "models.PermissionsMap": {
            "type": "object",
            "additionalProperties": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            }
        },
        "models.PermissionsResponse": {
            "type": "object",
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.PermissionsUpdate": {
            "type": "object",
            "properties": {
                "perm": {
                    "type": "string"
                },
                "role_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.Privacy": {
            "type": "object",
            "properties": {
                "contact": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Contact"
                    }
                },
                "noticeurl": {
                    "type": "string"
                }
            }
        },
        "models.ReasonRequest": {
            "type": "object",
            "properties": {
                "attachment": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "timeout": {
                    "type": "string"
                }
            }
        },
        "models.Report": {
            "type": "object",
            "properties": {
                "attachment_url": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "executor": {
                    "$ref": "#/definitions/models.FlatUser"
                },
                "executor_id": {
                    "type": "string"
                },
                "guild_id": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "timeout": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                },
                "type_name": {
                    "type": "string"
                },
                "victim": {
                    "$ref": "#/definitions/models.FlatUser"
                },
                "victim_id": {
                    "type": "string"
                }
            }
        },
        "models.ReportRequest": {
            "type": "object",
            "properties": {
                "attachment": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "timeout": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "models.SearchResult": {
            "type": "object",
            "properties": {
                "guilds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.GuildReduced"
                    }
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Member"
                    }
                }
            }
        },
        "models.SlashCommandInfo": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "dm_capable": {
                    "type": "boolean"
                },
                "domain": {
                    "type": "string"
                },
                "group": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/discordgo.ApplicationCommandOption"
                    }
                },
                "subdomains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/permissions.SubPermission"
                    }
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.StarboardEntryResponse": {
            "type": "object",
            "properties": {
                "author_avatar_url": {
                    "type": "string"
                },
                "author_id": {
                    "type": "string"
                },
                "author_username": {
                    "type": "string"
                },
                "channel_id": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "guild_id": {
                    "type": "string"
                },
                "media_urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message_id": {
                    "type": "string"
                },
                "message_url": {
                    "type": "string"
                },
                "score": {
                    "type": "integer"
                },
                "starboard_id": {
                    "type": "string"
                }
            }
        },
        "models.State": {
            "type": "object",
            "properties": {
                "state": {
                    "type": "boolean"
                }
            }
        },
        "models.Status": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                }
            }
        },
        "models.SystemInfo": {
            "type": "object",
            "properties": {
                "arch": {
                    "type": "string"
                },
                "bot_invite": {
                    "type": "string"
                },
                "bot_user_id": {
                    "type": "string"
                },
                "build_date": {
                    "type": "string"
                },
                "commit_hash": {
                    "type": "string"
                },
                "cpus": {
                    "type": "integer"
                },
                "go_routines": {
                    "type": "integer"
                },
                "go_version": {
                    "type": "string"
                },
                "guilds": {
                    "type": "integer"
                },
                "heap_use": {
                    "type": "integer"
                },
                "heap_use_str": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                },
                "stack_use": {
                    "type": "integer"
                },
                "stack_use_str": {
                    "type": "string"
                },
                "uptime": {
                    "type": "integer"
                },
                "uptime_str": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.UnbanRequest": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "guild_id": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "processed": {
                    "type": "string"
                },
                "processed_by": {
                    "type": "string"
                },
                "processed_message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                },
                "user_tag": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "avatar": {
                    "description": "The hash of the user's avatar. Use Session.UserAvatar\nto retrieve the avatar itself.",
                    "type": "string"
                },
                "avatar_url": {
                    "type": "string"
                },
                "bot": {
                    "description": "Whether the user is a bot.",
                    "type": "boolean"
                },
                "bot_owner": {
                    "type": "boolean"
                },
                "captcha_verified": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "discriminator": {
                    "description": "The discriminator of the user (4 numbers after name).",
                    "type": "string"
                },
                "email": {
                    "description": "The email of the user. This is only present when\nthe application possesses the email scope for the user.",
                    "type": "string"
                },
                "flags": {
                    "description": "The flags on a user's account.\nOnly available when the request is authorized via a Bearer token.",
                    "type": "integer"
                },
                "id": {
                    "description": "The ID of the user.",
                    "type": "string"
                },
                "locale": {
                    "description": "The user's chosen language option.",
                    "type": "string"
                },
                "mfa_enabled": {
                    "description": "Whether the user has multi-factor authentication enabled.",
                    "type": "boolean"
                },
                "premium_type": {
                    "description": "The type of Nitro subscription on a user's account.\nOnly available when the request is authorized via a Bearer token.",
                    "type": "integer"
                },
                "public_flags": {
                    "description": "The public flags on a user's account.\nThis is a combination of bit masks; the presence of a certain flag can\nbe checked by performing a bitwise AND between this int and the flag.",
                    "type": "integer"
                },
                "system": {
                    "description": "Whether the user is an Official Discord System user (part of the urgent message system).",
                    "type": "boolean"
                },
                "token": {
                    "description": "The token of the user. This is only present for\nthe user represented by the current session.",
                    "type": "string"
                },
                "username": {
                    "description": "The user's username.",
                    "type": "string"
                },
                "verified": {
                    "description": "Whether the user's email is verified.",
                    "type": "boolean"
                }
            }
        },
        "models.UsersettingsOTA": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "models.UsersettingsPrivacy": {
            "type": "object",
            "properties": {
                "starboard_optout": {
                    "type": "boolean"
                }
            }
        },
        "permissions.SubPermission": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "explicit": {
                    "type": "boolean"
                },
                "term": {
                    "type": "string"
                }
            }
        },
        "presence.Presence": {
            "type": "object",
            "properties": {
                "game": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "shireikan.SubPermission": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "explicit": {
                    "type": "boolean"
                },
                "term": {
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "description": "General root API functionalities.",
            "name": "Etc"
        },
        {
            "description": "General utility functionalities.",
            "name": "Utilities"
        },
        {
            "description": "Authorization endpoints.",
            "name": "Authorization"
        },
        {
            "description": "One Time Auth token endpoints.",
            "name": "OTA"
        },
        {
            "description": "Public API endpoints.",
            "name": "Public"
        },
        {
            "description": "Search endpoints.",
            "name": "Search"
        },
        {
            "description": "API token endpoints.",
            "name": "Tokens"
        },
        {
            "description": "Global bot settings endpoints.",
            "name": "Global Settings"
        },
        {
            "description": "General reports endpoints.",
            "name": "Reports"
        },
        {
            "description": "Guild specific endpoints.",
            "name": "Guilds"
        },
        {
            "description": "Guild backup endpoints.",
            "name": "Guild Backups"
        },
        {
            "description": "Unban requests endpoints.",
            "name": "Unban Requests"
        },
        {
            "description": "User specific settings endpoints.",
            "name": "User Settings"
        },
        {
            "description": "Member reporting endpoints.",
            "name": "Member Reporting"
        },
        {
            "description": "Members specific endpoints.",
            "name": "Members"
        },
        {
            "description": "Channels specific endpoints.",
            "name": "Channels"
        },
        {
            "description": "User verification endpoints.",
            "name": "Verification"
        }
    ]
}